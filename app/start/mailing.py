import asyncio
import random
import time

import pyrogram
from pyrogram import Client, filters, raw
from pyrogram.types import Message

from loader import app


async def run_tantan(message: Message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é.

    Returns:
        None
    """

    start_time = time.time()
    start_text = "**üïä –†–∞—Å—Å—ã–ª–æ—á–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ üïä**\n__üëÄ –¢–µ–±–µ –ø—Ä–∏–ª–µ—Ç–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.__"
    try:
        mess = await message.edit(start_text)
    except:
        mess = await message.reply(start_text)

    usernames = get_usernames_from_csv()
    usernames_txt = get_usernames_from_txt()

    count = 0
    for i in range(100):
        try:
            username = get_random_username(usernames, usernames_txt)
            peer = await app.resolve_peer(username)

            count += 1
            await send_draft_message(peer, "–ø—Ä–∏–≤–µ—Ç")
            await update_progress_message(message.chat.id, mess.id, count)

            save_username_to_txt(username)

            await asyncio.sleep(random.randint(3, 5))
        except:
            continue

    elapsed_time = time.time() - start_time
    completion_message = create_completion_message(count, elapsed_time)
    await send_completion_message(message.chat.id, completion_message)
    await message.delete()


def get_usernames_from_csv() -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV-—Ñ–∞–π–ª–∞.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    with open("data/usernames.csv", "r", encoding="utf-8") as f:
        usernames = f.read().split("\n")
    return usernames


def get_usernames_from_txt() -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ TXT-—Ñ–∞–π–ª–∞.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    with open("data/usernames.txt", "r", encoding="utf-8") as f:
        usernames_txt = f.read().split("\n")
    return usernames_txt


def get_random_username(usernames: list, usernames_txt: list) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ.

    Args:
        usernames (list): –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV-—Ñ–∞–π–ª–∞.
        usernames_txt (list): –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ TXT-—Ñ–∞–π–ª–∞.

    Returns:
        str: –°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    while True:
        username = random.choice(usernames)
        if username not in usernames_txt:
            return username


async def send_draft_message(peer, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        peer: –ü–∏—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    Returns:
        None
    """

    await app.invoke(raw.functions.messages.SaveDraft(peer=peer, message=message))


async def update_progress_message(chat_id, message_id, count):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        chat_id: ID —á–∞—Ç–∞.
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è.
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        None
    """

    progress_message = f"**üïä –†–∞—Å—Å—ã–ª–æ—á–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ üïä**\n__üëÄ –¢–µ–±–µ –ø—Ä–∏–ª–µ—Ç–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è__\n\nüíé –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}"
    await app.edit_message_text(chat_id, message_id, progress_message)


def save_username_to_txt(username: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ TXT-—Ñ–∞–π–ª.

    Args:
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        None
    """

    with open("data/usernames.txt", "a", encoding="utf-8") as f:
        f.write("\n" + username)


def create_completion_message(count: int, elapsed_time: float) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        elapsed_time (float): –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.
    """

    completion_message = f"**üåº –û—Ç–ª–∏—á–Ω–æ!**\n__üëâüèª {count} —á–µ—Ä–Ω–æ–≤__.\n‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥."
    return completion_message


async def send_completion_message(chat_id, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        chat_id: ID —á–∞—Ç–∞.
        message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Returns:
        None
    """

    await app.send_message(chat_id, message)
